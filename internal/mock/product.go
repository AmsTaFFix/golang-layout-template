// Code generated by MockGen. DO NOT EDIT.
// Source: product.go

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	internal "github.com/AmsTaFFix/golang-layout-template/internal"
	gomock "github.com/golang/mock/gomock"
)

// MockProductStorage is a mock of ProductStorage interface.
type MockProductStorage struct {
	ctrl     *gomock.Controller
	recorder *MockProductStorageMockRecorder
}

// MockProductStorageMockRecorder is the mock recorder for MockProductStorage.
type MockProductStorageMockRecorder struct {
	mock *MockProductStorage
}

// NewMockProductStorage creates a new mock instance.
func NewMockProductStorage(ctrl *gomock.Controller) *MockProductStorage {
	mock := &MockProductStorage{ctrl: ctrl}
	mock.recorder = &MockProductStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockProductStorage) EXPECT() *MockProductStorageMockRecorder {
	return m.recorder
}

// Get mocks base method.
func (m *MockProductStorage) Get(ctx context.Context, productID internal.ProductID) (internal.Product, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Get", ctx, productID)
	ret0, _ := ret[0].(internal.Product)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Get indicates an expected call of Get.
func (mr *MockProductStorageMockRecorder) Get(ctx, productID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Get", reflect.TypeOf((*MockProductStorage)(nil).Get), ctx, productID)
}

// Set mocks base method.
func (m *MockProductStorage) Set(ctx context.Context, product internal.Product) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", ctx, product)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockProductStorageMockRecorder) Set(ctx, product interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockProductStorage)(nil).Set), ctx, product)
}
